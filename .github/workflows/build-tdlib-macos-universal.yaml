name: tdlib-build-macos-universal
on:
  workflow_dispatch:
    inputs:
      commit_hash:
        description: 'Commit Hash'
        required: true
        type: string
      version:
        description: 'Version'
        required: true
        type: string
      UPDATE_TDLIB:
        description: 'UPDATE_TDLIB'
        required: true
        type: string
        default: 'false'
      RUN_IDS:
        description: 'RUN_IDS'
        required: true
        type: string
permissions:
  actions: write
  contents: read
jobs:
  build-tdlib-macos-universal:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          fetch-tags: true
          
      - name: Parse Inputs in GITHUB_ENV
        run: |
          echo "commit_hash=${{ inputs.commit_hash }}" >> $GITHUB_ENV
          echo "version=${{ inputs.version }}" >> $GITHUB_ENV
          echo "UPDATE_TDLIB=${{ inputs.UPDATE_TDLIB }}" >> $GITHUB_ENV
          echo "RUN_IDS=${{ inputs.RUN_IDS }}" >> $GITHUB_ENV

      - name: JSON to variables
        if: env.UPDATE_TDLIB == 'true'
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: tdbuild_versions

      - name: Install Build Essentials
        if: env.UPDATE_TDLIB == 'true'
        run: |
          brew install gperf coreutils

          OPENSSL_INST_VER="/opt/homebrew/opt/openssl/"
          HOST_ARCH=$(uname -m)
          mkdir artifacts && ARTIFACT_DIR="${PWD}/artifacts"

          echo "OPENSSL_INST_VER=$OPENSSL_INST_VER" >> $GITHUB_ENV
          echo "HOST_ARCH=$HOST_ARCH" >> $GITHUB_ENV
          echo "ARTIFACT_DIR=$ARTIFACT_DIR" >> $GITHUB_ENV

      - name: Cache Lookup
        if: env.UPDATE_TDLIB == 'true'
        id: cache-lookup
        uses: actions/cache@v4
        with:
          path: td
          key: ${{ runner.os }}-openssl-${{ env.version }}-${{ hashFiles('td/example/ios/build-openssl.sh') }}
          lookup-only: true

      - name: Clean td if cache exists
        if: |
          env.UPDATE_TDLIB == 'true' && steps.cache-lookup.outputs.cache-hit == 'true'
        run: rm -rf td

      - name: Restore Cache
        if: |
          env.UPDATE_TDLIB == 'true' && steps.cache-lookup.outputs.cache-hit == 'true'
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: td
          key: ${{ runner.os }}-openssl-${{ env.version }}-${{ hashFiles('td/example/ios/build-openssl.sh') }}

      - name: Build OpenSSL for iOS watchOS tvOS visionOS and macOS
        if: |
          env.UPDATE_TDLIB == 'true' && steps.cache-lookup.outputs.cache-hit != 'true'
        run: |
          cd td/example/ios
            SYSTEM="macOS iOS watchOS tvOS visionOS"             
            echo "Building OpenSSL for $SYSTEM"
            ./build-openssl.sh

      - name: Save Cache
        if: |
          env.UPDATE_TDLIB == 'true' && steps.cache-lookup.outputs.cache-hit != 'true'
        id: cache-save
        uses: actions/cache@v4
        with:
          path: td
          key: ${{ runner.os }}-openssl-${{ env.version }}-${{ hashFiles('td/example/ios/build-openssl.sh') }}
          
      - name: Build TDLib for iOS watchOS tvOS visionOS and macOS universal Release
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td/example/ios
            echo "sed'ing commented line out"
            sed -i '' 's/#platforms="watchOS"//g' build.sh
            echo "sed'ing make to maximum cores"
            sed -i '' 's/make -j3 install/make -j$(sysctl -n hw.ncpu) install/g' build.sh
            
            BUILD_TYPE="Release"
            eval "$(grep '^platforms=' build.sh)"
            all_platforms=$platforms
                  
            echo "Building TDLib for $platforms $HOST_ARCH $BUILD_TYPE"    
            TDLIB_DIR="${PWD}/tdjson"
            
            for platform in $platforms;do
                echo "sed'ing $platforms with $platform"
                sed -i '' "s/platforms=\"${platforms}\"/platforms=\"${platform}\"/g" build.sh
                platforms="$platform"
                ./build.sh
                TDLIB_ZIP="tdlib-$platform-$BUILD_TYPE-$version.zip"
                echo "compressing $TDLIB_ZIP"
                jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $(ls tdjson/$platform*/lib/*)
                rm -rf build
            done
            sed -i '' "s/platforms=\"${platform}\"/platforms=\"${all_platforms}\"/g" build.sh            
            echo "platforms=$all_platforms" >> $GITHUB_ENV  

      - name: Build TDLib for iOS watchOS tvOS visionOS and macOS universal Debug
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td/example/ios            
            BUILD_TYPE="Debug"  
            echo "sed'ing build type Release to Debug"
            sed -i '' 's/DCMAKE_BUILD_TYPE=Release/DCMAKE_BUILD_TYPE=Debug/g' build.sh
            
            echo "Building TDLib for $platforms $HOST_ARCH $BUILD_TYPE"    
            TDLIB_DIR="${PWD}/tdjson"
            rm -rf $TDLIB_DIR
            
            for platform in $platforms;do
                echo "sed'ing $platforms with $platform"
                sed -i '' "s/platforms=\"${platforms}\"/platforms=\"${platform}\"/g" build.sh
                platforms="$platform"
                ./build.sh
                TDLIB_ZIP="tdlib-$platform-$BUILD_TYPE-$version.zip"
                echo "compressing $TDLIB_ZIP"
                jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $(ls tdjson/$platform*/lib/*)
                rm -rf build
            done

      - name: Upload To Artifacts Dir
        if: env.UPDATE_TDLIB == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ArtifactsDir
          path: ${{ env.ARTIFACT_DIR }}/*.zip
          retention-days: 1

      - name: Trigger last Workflow per CLI
        if: env.UPDATE_TDLIB == 'true'
        run: |
          RUN_ID="${{ github.run_id }}"
          RUN_IDS="$RUN_IDS,$RUN_ID"
          gh workflow run .github/workflows/upload_artifacts.yaml \
          --field commit_hash="$commit_hash" \
          --field version="$version" \
          --field UPDATE_TDLIB="$UPDATE_TDLIB" \
          --field RUN_IDS="$RUN_IDS" \
          --ref ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
