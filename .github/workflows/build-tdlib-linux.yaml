# This is a basic workflow to help you get started with Actions

name: tdlib-build-linux

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: clone TD lib and compare versions
        run: |
          git clone https://github.com/s-em-i/TDLib_Flutter_client_prebuilt_binaries.git
          cd TDLib_Flutter_client_prebuilt_binaries
          LatestPrebuiltReleasedVersionTag=$(git describe --tags --abbrev=0 | sed 's/v//')
          echo $LatestPrebuiltReleasedVersionTag
          cd -
          git clone https://github.com/tdlib/td.git
          cd td
          LastReleasedVersionTag=$(git log -n 1 --grep="Update version to " --oneline)
          commit_hash=$(echo "$LastReleasedVersionTag" | awk '{print $1}')
          version=$(echo "$LastReleasedVersionTag" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.' | sed 's/\.$//')
          echo "$version"
          cd -

          echo "UPDATE_TDLIB=false" >> $GITHUB_ENV

          if [[ $(echo -e "$version\n$LatestPrebuiltReleasedVersionTag" | sort -V | head -n1) == "$LatestPrebuiltReleasedVersionTag" ]]; then
            echo "version=$version" >> $GITHUB_ENV
            echo "commit_hash=$commit_hash" >> $GITHUB_ENV
            echo "commit_message=$commit_hash Update version to $version" >> $GITHUB_ENV
            echo "UPDATE_TDLIB=true" >> $GITHUB_ENV
          fi
      
      - name: JSON to variables
        if: env.UPDATE_TDLIB == 'true'
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: tdbuild_versions
          
      - name: install build essentials
        if: env.UPDATE_TDLIB == 'true'
        run: |
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install -y make git zlib1g-dev libssl-dev gperf php-cli cmake clang-14 libc++-14-dev libc++abi-14-dev build-essential libc6-dev-arm64-cross
          sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
          
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-14 100
      
      - name: Re-clone TDlib
        if: env.UPDATE_TDLIB == 'true'
        run: |
          rm -rf td
          git clone https://github.com/tdlib/td.git
          cd td && git checkout $commit_hash 
          
      - name: Build TDLib Linux x86_64 Release
        if: env.UPDATE_TDLIB == 'false'
        run: |
          cd td && rm -rf build && mkdir build && cd build

          CXXFLAGS="-stdlib=libc++" CC=/usr/bin/clang-14 CXX=/usr/bin/clang++-14 \
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX:PATH=../tdlib-x86_64-release \
                -DTD_ENABLE_LTO=ON \
                -DCMAKE_AR=/usr/bin/llvm-ar-14 \
                -DCMAKE_NM=/usr/bin/llvm-nm-14 \
                -DCMAKE_OBJDUMP=/usr/bin/llvm-objdump-14 \
                -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-14 \
                ..
          
          cmake --build . --parallel $(nproc)
          cmake --install .
          cd .. && cd ..
          
          echo "[+] x86_64 Release Verification:"
          file td/tdlib-x86_64-release/lib/libtdjson.so
          ls -lh td/tdlib-x86_64-release/lib/libtdjson.*

      - name: Build TDLib Linux ARM64 Release
        if: env.UPDATE_TDLIB == 'true'
        run: |
          
          # Clang-Version
          clang-14 --version | head -1 || echo "❌ clang-14 not found"
          clang-18 --version | head -1 || echo "❌ clang-18 not found"
          clang --version | head -1 || echo "❌ Default clang not found"
          
          # LLVM-Versionen
          ls -la /usr/lib/llvm-14/ 2>/dev/null || echo "❌ llvm-14 not found"
          ls -la /usr/lib/llvm-18/ 2>/dev/null || echo "❌ llvm-18 not found"
          
          # Welche Version ist aktiv?
          echo "[+] Active LLVM version:"
          llvm-config --version 2>/dev/null || echo "❌ llvm-config not found"
          ldd --version | head -1  # System Linker-Version
          
          # Sanitizer-Pfade prüfen
          echo "[+] Sanitizer libraries:"
          find /usr/lib/llvm* -name "*ubsan*" 2>/dev/null | head -5 || echo "No ubsan libraries found"
          
          # Update-alternatives Status
          echo "[+] Update-alternatives:"
          update-alternatives --display clang || echo "No alternatives for clang"
          update-alternatives --display clang++ || echo "No alternatives for clang++"
          
          # Cross-Compile Dependencies zuerst (OpenSSL, Zlib - aus erfolgreichen Builds)
          echo "[+] Building ARM64 Dependencies..."

          # Dependencies cross-kompilieren (OpenSSL, gperf)
          echo "[+] Cross-compiling Dependencies..."
          mkdir -p /tmp/arm64-deps && cd /tmp/arm64-deps
          
          # gperf (TDLib braucht es für Generierung)
          wget http://ftp.gnu.org/pub/gnu/gperf/gperf-${{ env.tdbuild_versions_gperf }}.tar.gz
          tar -xf gperf-${{ env.tdbuild_versions_gperf }}.tar.gz
          cd gperf-${{ env.tdbuild_versions_gperf }}
          CC=/usr/bin/aarch64-linux-gnu-gcc \
          ./configure --prefix=/tmp/arm64-deps --host=aarch64-linux-gnu
          make -j$(nproc)
          make install
          cd /tmp/arm64-deps
        
          mkdir -p td/third-party && cd td/third-party
          
          # Zlib cross-compile (minimal)
          #rm -rf zlib-arm64
          #wget https://zlib.net/zlib-${{ env.tdbuild_versions_zlib }}.tar.gz
          #tar -xf zlib-${{ env.tdbuild_versions_zlib }}.tar.gz
          #cd zlib-${{ env.tdbuild_versions_zlib }}
          #CC=/usr/bin/aarch64-linux-gnu-gcc \
          #CXX=/usr/bin/aarch64-linux-gnu-g++ \
          #AR=/usr/bin/aarch64-linux-gnu-ar \
          #./configure --prefix=/tmp/arm64-deps --host=aarch64-linux-gnu --static
          #make -j$(nproc)
          #make install
          #cd ..
          
          # OpenSSL cross-compile
          echo "[+] Building OpenSSL for ARM64..."
          cd /tmp/arm64-deps
          wget https://github.com/openssl/openssl/releases/download/openssl-${{ env.tdbuild_versions_openssl }}/openssl-${{ env.tdbuild_versions_openssl }}.tar.gz
          tar -xf openssl-${{ env.tdbuild_versions_openssl }}.tar.gz
          cd openssl-${{ env.tdbuild_versions_openssl }}
          CC=/usr/bin/aarch64-linux-gnu-gcc \
          CXX=/usr/bin/aarch64-linux-gnu-g++ \
          AR=/usr/bin/aarch64-linux-gnu-ar \
          ./Configure linux-aarch64 --prefix=/tmp/arm64-deps --openssldir=/tmp/arm64-deps/ssl no-shared no-tests
          make -j$(nproc)
          make install
          cd /home/runner/work/TDLib_Flutter_client_prebuilt_binaries/TDLib_Flutter_client_prebuilt_binaries/td  # Zurück zu td/
          
          # TDLib ARM64 Build
          cd ..
          rm -rf build && mkdir build && cd build
          
          CC=/usr/bin/aarch64-linux-gnu-gcc \
          CXX=/usr/bin/aarch64-linux-gnu-g++ \
          AR=/usr/bin/llvm-ar-14 \          # ← LLVM-14 Tools (wie x86_64)!
          RANLIB=/usr/bin/llvm-ranlib-14 \  # ← LLVM-14 Tools
          NM=/usr/bin/llvm-nm-14 \          # ← LLVM-14 Tools
          OBJDUMP=/usr/bin/llvm-objdump-14 \ # ← LLVM-14 Tools
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX:PATH=../tdlib-arm64-release \
                -DTD_ENABLE_LTO=ON \
                -DCMAKE_SYSTEM_NAME=Linux \
                -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
                -DCMAKE_C_COMPILER=/usr/bin/aarch64-linux-gnu-gcc \
                -DCMAKE_CXX_COMPILER=/usr/bin/aarch64-linux-gnu-g++ \
                -DCMAKE_AR=/usr/bin/llvm-ar-14 \          # ← Explizit LLVM-14!
                -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-14 \ # ← Explizit LLVM-14!
                -DCMAKE_NM=/usr/bin/llvm-nm-14 \          # ← Explizit LLVM-14!
                -DCMAKE_OBJDUMP=/usr/bin/llvm-objdump-14 \ # ← Explizit LLVM-14!
                -DCMAKE_FIND_ROOT_PATH=/usr/aarch64-linux-gnu \
                -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER \
                -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY \
                -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY \
                -DCPP_DRIVER_GENERATOR=OFF \
                -DTD_ENABLE_CPP_DRIVER_GENERATOR=OFF \
                -DTD_ENABLE_TESTS=OFF \
                -DTD_ENABLE_GENERATED_FILES=OFF \
                ..
          
          cmake --build . --parallel $(nproc)
          cmake --install .
          cd .. && cd ..
          
          echo "[+] ARM64 Release Verification:"
          file tdlib-arm64-release/lib/libtdjson.so
          ls -lh tdlib-arm64-release/lib/libtdjson.*
          
      - name: Verify Binaries
        if: env.UPDATE_TDLIB == 'false'
        run: |
          cd td/build
          echo "=== x86_64 Release ==="
          file ../tdlib-x86_64-release/lib/libtdjson.so
          
          echo "=== ARM64 Release ==="
          file ../tdlib-arm64-release/lib/libtdjson.so
          
          echo "=== Sizes ==="
          ls -lh ../tdlib-*-release/lib/libtdjson.*
      
      - name: Create Release Archives
        if: env.UPDATE_TDLIB == 'false'
        run: |
          cd td/build
          
          jar -cMf ../tdlib-linux-x86_64.zip tdlib-x86_64-release/ tdlib-x86_64-debug/
          echo "tdlib-linux-x86_64=tdlib-linux-x86_64.zip" >> $GITHUB_ENV
          jar -cMf ../tdlib-linux-arm64.zip tdlib-arm64-release/ tdlib-arm64-debug/
          echo "tdlib-linux-arm64=tdlib-arm64-x86_64.zip" >> $GITHUB_ENV
          
          ls -lh ../tdlib-*.zip

      - name: Upload to Telegram
        if: env.UPDATE_TDLIB == 'false'
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          SESSION: ${{ secrets.TELEGRAM_SESSION }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          MESSAGE_THREAD_ID: ${{ secrets.MESSAGE_THREAD_ID }}
          COMMIT_MESSAGE: ${{ env.commit_message }}
        run: |
          if [ ! -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
            pip3 install Telethon==${{ env.tdbuild_versions_Telethon }}
            python3 .github/workflows/tguploadbot.py $tdlib-linux-x86_64 $tdlib-linux-arm64
          fi
