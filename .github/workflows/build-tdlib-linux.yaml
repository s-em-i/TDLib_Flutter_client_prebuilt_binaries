# This is a basic workflow to help you get started with Actions

name: tdlib-build-linux

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: clone TD lib and compare versions
        run: |
          git clone https://github.com/s-em-i/TDLib_Flutter_client_prebuilt_binaries.git
          cd TDLib_Flutter_client_prebuilt_binaries
          LatestPrebuiltReleasedVersionTag=$(git describe --tags --abbrev=0 | sed 's/v//')
          echo $LatestPrebuiltReleasedVersionTag
          cd -
          git clone https://github.com/tdlib/td.git
          cd td
          LastReleasedVersionTag=$(git log -n 1 --grep="Update version to " --oneline)
          commit_hash=$(echo "$LastReleasedVersionTag" | awk '{print $1}')
          version=$(echo "$LastReleasedVersionTag" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.' | sed 's/\.$//')
          echo "$version"
          cd -

          echo "UPDATE_TDLIB=false" >> $GITHUB_ENV

          if [[ $(echo -e "$version\n$LatestPrebuiltReleasedVersionTag" | sort -V | head -n1) == "$LatestPrebuiltReleasedVersionTag" ]]; then
            echo "version=$version" >> $GITHUB_ENV
            echo "commit_hash=$commit_hash" >> $GITHUB_ENV
            echo "commit_message=$commit_hash Update version to $version" >> $GITHUB_ENV
            echo "UPDATE_TDLIB=true" >> $GITHUB_ENV
          fi
      
      - name: JSON to variables
        if: env.UPDATE_TDLIB == 'true'
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: tdbuild_versions
          
      - name: install build essentials
        if: env.UPDATE_TDLIB == 'true'
        run: |
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install -y make git zlib1g-dev libssl-dev gperf php-cli cmake clang-14 libc++-14-dev libc++abi-14-dev build-essential libc6-dev-arm64-cross
          sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
          sudo apt-get install -y wget libncurses5-dev perl llvm-14 autoconf automake libtool pkg-config ninja-build libreadline-dev
          
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-14 100
      
      - name: Re-clone TDlib
        if: env.UPDATE_TDLIB == 'true'
        run: |
          rm -rf td
          git clone https://github.com/tdlib/td.git
          cd td && git checkout $commit_hash 
          
      - name: Build TDLib Linux x86_64 Release
        if: env.UPDATE_TDLIB == 'false'
        run: |
          cd td && rm -rf build && mkdir build && cd build

          CXXFLAGS="-stdlib=libc++" CC=/usr/bin/clang-14 CXX=/usr/bin/clang++-14 \
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX:PATH=../tdlib-x86_64-release \
                -DTD_ENABLE_LTO=ON \
                -DCMAKE_AR=/usr/bin/llvm-ar-14 \
                -DCMAKE_NM=/usr/bin/llvm-nm-14 \
                -DCMAKE_OBJDUMP=/usr/bin/llvm-objdump-14 \
                -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-14 \
                ..
          
          cmake --build . --parallel $(nproc)
          cmake --install .
          cd .. && cd ..
          
          echo "[+] x86_64 Release Verification:"
          file td/tdlib-x86_64-release/lib/libtdjson.so
          ls -lh td/tdlib-x86_64-release/lib/libtdjson.*

      - name: Build Zlib cross-compile
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            ZLIB_ARM_DIR="${PWD}/third_party/zlib/linux-arm64"
            CROSS_COMPILE="aarch64-linux-gnu"
            rm -rf "${ZLIB_ARM_DIR}"
            mkdir -p "${ZLIB_ARM_DIR}"
  
            # Zlib cross-compile (minimal)
            wget https://zlib.net/zlib-${{ env.tdbuild_versions_zlib }}.tar.gz
            tar -xf zlib-${{ env.tdbuild_versions_zlib }}.tar.gz
            cd zlib-${{ env.tdbuild_versions_zlib }}
              ./configure \
              --prefix="${PWD}/install" \
              CHOST="${CROSS_COMPILE}" \
              CC="${CROSS_COMPILE}-gcc" \
              CXX="${CROSS_COMPILE}-g++" \
              AR="${CROSS_COMPILE}-ar" \
              RANLIB="${CROSS_COMPILE}-ranlib" \
              LD="${CROSS_COMPILE}-ld" \
              NM="${CROSS_COMPILE}-nm" \
              STRIP="${CROSS_COMPILE}-strip" \
              --static
              make -j$(nproc)
              make install
            cd ..
            echo "CROSS_COMPILE=$CROSS_COMPILE" >> $GITHUB_ENV
            echo "ZLIB_ARM_DIR=$ZLIB_ARM_DIR" >> $GITHUB_ENV

      - name: Build OpenSSL cross-compile
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            OPENSSL_ARM_DIR="${PWD}/third_party/openssl/linux-arm64"
            rm -rf "${OPENSSL_ARM_DIR}"
            mkdir -p "${OPENSSL_ARM_DIR}/lib"
            mkdir -p "${OPENSSL_ARM_DIR}/include"            
            wget https://github.com/openssl/openssl/releases/download/openssl-${{ env.tdbuild_versions_openssl }}/openssl-${{ env.tdbuild_versions_openssl }}.tar.gz
            tar -xf openssl-${{ env.tdbuild_versions_openssl }}.tar.gz
            cd openssl-${{ env.tdbuild_versions_openssl }}              
              echo "Configuring OpenSSL for ARM64 cross-compile..."
              ./Configure \
              --cross-compile-prefix="${CROSS_COMPILE}-" \
              --prefix="${PWD}/install" \
              --openssldir="${PWD}/install" \
              LD="${CROSS_COMPILE}ld" \
              linux-aarch64 \
              no-shared \
              no-asm \
              no-tests \
              no-legacy         
              make build_libs -j$(nproc) V=1
              cp libcrypto.a "${OPENSSL_ARM_DIR}/lib/"
              cp libssl.a "${OPENSSL_ARM_DIR}/lib/"
              "${CROSS_COMPILE}strip" --strip-unneeded "${OPENSSL_ARM_DIR}/lib/libcrypto.a"
              "${CROSS_COMPILE}strip" --strip-unneeded "${OPENSSL_ARM_DIR}/lib/libssl.a"
              cp -r include/openssl "${OPENSSL_ARM_DIR}/include/"
            cd ..
  
            echo "OPENSSL_ARM_DIR=$OPENSSL_ARM_DIR" >> $GITHUB_ENV
            #echo "PKG_CONFIG_PATH=${BUILD_DIR}/openssl-install/lib/pkgconfig:${PKG_CONFIG_PATH}" >> $GITHUB_ENV
            #echo "LD_LIBRARY_PATH=${BUILD_DIR}/openssl-install/lib:${LD_LIBRARY_PATH}" >> $GITHUB_ENV

      - name: Build TDLib ARM64 cross-compile
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            TDLIB_ARM_DIR="${PWD}/third_party/td/linux-arm64"
            TEMP_TOOLCHAIN="/tmp/toolchain-arm64.cmake"

            echo "Building TDLib for Linux ARM64 (cross from x86-64, static)..."
            
            rm -rf "${TDLIB_ARM_DIR}"
            mkdir -p "${TDLIB_ARM_DIR}/lib"
            mkdir -p "${TDLIB_ARM_DIR}/include"
            
            # Create temporary toolchain file
            cat > "${TEMP_TOOLCHAIN}" << EOF
            # Simple CMake Toolchain for cross-compiling to Linux ARM64 from x86-64
            set(CMAKE_SYSTEM_NAME Linux)
            set(CMAKE_SYSTEM_PROCESSOR aarch64)
            
            # Specify the cross compilers and tools
            set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
            set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
            set(CMAKE_AR aarch64-linux-gnu-ar)
            set(CMAKE_RANLIB aarch64-linux-gnu-ranlib)
            set(CMAKE_STRIP aarch64-linux-gnu-strip)
            set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu ${ZLIB_ARM_DIR})
            
            # Adjust default behavior of the FIND_XXX() commands
            set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
            set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
            set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
            set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
            EOF

            rm -rf build && mkdir build && cd build

            echo "Configuring TDLib with CMake..."
            cmake -G Ninja \
                  -DCMAKE_TOOLCHAIN_FILE="${TEMP_TOOLCHAIN}" \
                  -DOPENSSL_ROOT_DIR="${OPENSSL_ARM_DIR}" \
                  -DZLIB_ROOT="${ZLIB_ARM_DIR}" \
                  -DBUILD_SHARED_LIBS=OFF \
                  -DCMAKE_BUILD_TYPE=Release \
                  -DTD_ENABLE_JNI=OFF \
                  -DTD_ENABLE_DOTNET=OFF \
                  -DTD_ENABLE_PYTHON=OFF \
                  -DTD_ENABLE_TESTS=OFF \
                  -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                  ..

            echo "Building TDLib..."
            cmake --build . -j$(nproc) V=1  # V=1 for verbose if needed

            # Copy libs and headers to target
            cp example/libtdjson.a "${TDLIB_ARM_DIR}/lib/"  # Static lib (BUILD_SHARED_LIBS=OFF)
            cp -r ../tdjson "${TDLIB_ARM_DIR}/include/"  # Headers from tdjson/ dir
            aarch64-linux-gnu-strip --strip-unneeded "${TDLIB_ARM_DIR}/lib/libtdjson.a"
            echo "TDLib cross-build complete! Lib in ${TDLIB_ARM_DIR}/lib/libtdjson.a, headers in ${TDLIB_ARM_DIR}/include/."

            echo "TDLIB_ARM_DIR=$TDLIB_ARM_DIR" >> $GITHUB_ENV
            ### END ###
          
      - name: Verify Binaries
        if: env.UPDATE_TDLIB == 'false'
        run: |
          cd td/build
          echo "=== x86_64 Release ==="
          file ../tdlib-x86_64-release/lib/libtdjson.so
          
          echo "=== ARM64 Release ==="
          file ../tdlib-arm64-release/lib/libtdjson.so
          
          echo "=== Sizes ==="
          ls -lh ../tdlib-*-release/lib/libtdjson.*
      
      - name: Create Release Archives
        if: env.UPDATE_TDLIB == 'false'
        run: |
          cd td/build
          
          jar -cMf ../tdlib-linux-x86_64.zip tdlib-x86_64-release/ tdlib-x86_64-debug/
          echo "tdlib-linux-x86_64=tdlib-linux-x86_64.zip" >> $GITHUB_ENV
          jar -cMf ../tdlib-linux-arm64.zip tdlib-arm64-release/ tdlib-arm64-debug/
          echo "tdlib-linux-arm64=tdlib-arm64-x86_64.zip" >> $GITHUB_ENV
          
          ls -lh ../tdlib-*.zip

      - name: Upload to Telegram
        if: env.UPDATE_TDLIB == 'false'
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          SESSION: ${{ secrets.TELEGRAM_SESSION }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          MESSAGE_THREAD_ID: ${{ secrets.MESSAGE_THREAD_ID }}
          COMMIT_MESSAGE: ${{ env.commit_message }}
        run: |
          if [ ! -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
            pip3 install Telethon==${{ env.tdbuild_versions_Telethon }}
            python3 .github/workflows/tguploadbot.py $tdlib-linux-x86_64 $tdlib-linux-arm64
          fi
