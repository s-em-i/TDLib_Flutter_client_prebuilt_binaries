# This is a basic workflow to help you get started with Actions

name: tdlib-build-linux

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: clone TD lib and compare versions
        run: |
          git clone https://github.com/s-em-i/TDLib_Flutter_client_prebuilt_binaries.git
          cd TDLib_Flutter_client_prebuilt_binaries
            LatestPrebuiltReleasedVersionTag=$(git describe --tags --abbrev=0 | sed 's/v//')
            echo $LatestPrebuiltReleasedVersionTag
          cd -
          git clone https://github.com/tdlib/td.git
          cd td
            LastReleasedVersionTag=$(git log -n 1 --grep="Update version to " --oneline)
            commit_hash=$(echo "$LastReleasedVersionTag" | awk '{print $1}')
            version=$(echo "$LastReleasedVersionTag" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.' | sed 's/\.$//')
            echo "$version"          
  
            echo "UPDATE_TDLIB=false" >> $GITHUB_ENV
  
            if [[ $(echo -e "$version\n$LatestPrebuiltReleasedVersionTag" | sort -V | head -n1) == "$LatestPrebuiltReleasedVersionTag" ]]; then
              git checkout $commit_hash
              echo "version=$version" >> $GITHUB_ENV
              echo "commit_hash=$commit_hash" >> $GITHUB_ENV
              echo "commit_message=$commit_hash Update version to $version" >> $GITHUB_ENV
              echo "UPDATE_TDLIB=true" >> $GITHUB_ENV
              echo "TG_UPLOAD_FILES=" >> $GITHUB_ENV
            fi
          cd -
      
      - name: JSON to variables
        if: env.UPDATE_TDLIB == 'true'
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: tdbuild_versions
          
      - name: install build essentials
        if: env.UPDATE_TDLIB == 'true'
        run: |
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install -y make git zlib1g-dev libssl-dev gperf php-cli cmake clang-14 libc++-14-dev libc++abi-14-dev build-essential libc6-dev-arm64-cross
          sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
          sudo apt-get install -y wget libncurses5-dev perl llvm-14 autoconf automake libtool pkg-config ninja-build libreadline-dev
          
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-14 100
      
      - name: Build Zlib ${{ env.tdbuild_versions_zlib }} for host x86_64
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            ZLIB_ROOT="${PWD}/third_party/zlib/linux-x86_64"
            echo "ZLIB_ROOT=$ZLIB_ROOT" >> $GITHUB_ENV
            ZLIB_SRC_DIR="${PWD}/zlib-${{ env.tdbuild_versions_zlib }}"
            echo "ZLIB_SRC_DIR=$ZLIB_SRC_DIR" >> $GITHUB_ENV
            
            rm -rf "${ZLIB_ROOT}" && mkdir -p "${ZLIB_ROOT}"
            wget https://zlib.net/zlib-${{ env.tdbuild_versions_zlib }}.tar.gz
            tar -xf zlib-${{ env.tdbuild_versions_zlib }}.tar.gz
            cd $ZLIB_SRC_DIR
              echo "Configuring Zlib for x86_64 host compile..."
              ./configure --prefix="${PWD}/install" --static
              make -j$(nproc)
              make install
              cp -r install/* $ZLIB_ROOT
            cd ..

      - name: Build OpenSSL ${{ env.tdbuild_versions_openssl }} for host x86_64
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            OPENSSL_ROOT_DIR="${PWD}/third_party/openssl/linux-x86_64"
            echo "OPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR" >> $GITHUB_ENV    
            OPENSSL_SRC_DIR="${PWD}/openssl-${{ env.tdbuild_versions_openssl }}"
            echo "OPENSSL_SRC_DIR=$OPENSSL_SRC_DIR" >> $GITHUB_ENV
            
            rm -rf "${OPENSSL_ROOT_DIR}" && mkdir -p "${OPENSSL_ROOT_DIR}/lib" && mkdir -p "${OPENSSL_ROOT_DIR}/include"            
            wget https://github.com/openssl/openssl/releases/download/openssl-${{ env.tdbuild_versions_openssl }}/openssl-${{ env.tdbuild_versions_openssl }}.tar.gz
            tar -xf openssl-${{ env.tdbuild_versions_openssl }}.tar.gz
            cd $OPENSSL_SRC_DIR             
              echo "Configuring OpenSSL for x86_64 host compile..."
              ./Configure \
              linux-x86_64 \
              --prefix="${OPENSSL_SRC_DIR}/install" \
              --openssldir="${OPENSSL_SRC_DIR}/install" \
              enable-pic \
              -static
              make build_libs -j$(nproc)
              cp libcrypto.a libssl.a "${OPENSSL_ROOT_DIR}/lib/"
              cp -r include/openssl "${OPENSSL_ROOT_DIR}/include/"
            cd ..
          
      - name: Build TDLib Linux x86_64 Release
        if: env.UPDATE_TDLIB == 'true'
        run: |
          TDLIB_x86_64_DIR="${PWD}/third_party/td/linux-x86_64-release"

          echo "Building TDLib for Linux x86_64 ..."
          
          rm -rf "${TDLIB_x86_64_DIR}"
          mkdir -p "${TDLIB_x86_64_DIR}/lib"
          mkdir -p "${TDLIB_x86_64_DIR}/include"
          
          cd td && rm -rf build && mkdir build && cd build

            CXXFLAGS="-stdlib=libc++" CC=/usr/bin/clang-14 CXX=/usr/bin/clang++-14 \
            cmake -DCMAKE_BUILD_TYPE=Release \
                  -DCMAKE_INSTALL_PREFIX:PATH="${TDLIB_x86_64_DIR}" \
                  -DTD_ENABLE_LTO=ON \
                  -DCMAKE_AR=/usr/bin/llvm-ar-14 \
                  -DCMAKE_NM=/usr/bin/llvm-nm-14 \
                  -DCMAKE_OBJDUMP=/usr/bin/llvm-objdump-14 \
                  -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-14 \
                  ..
          
            cmake --build . --parallel $(nproc)
            cmake --install .
          cd ..
          
          echo "[+] x86_64 Release Verification:"
          file td/tdlib-x86_64-release/lib/libtdjson.so
          ls -lh td/tdlib-x86_64-release/lib/libtdjson.*
          jar -cMf tdlib-linux-x86_64-release.zip "${TDLIB_x86_64_DIR}/"
          echo "TG_UPLOAD_FILES=$TG_UPLOAD_FILES ${PWD}/tdlib-linux-x86_64-release.zip" >> $GITHUB_ENV
          echo "TDLIB_x86_64_DIR=$TDLIB_x86_64_DIR" >> $GITHUB_ENV

      - name: Prepare TDlib for arm64 cross compiling
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            CROSS_COMPILE="aarch64-linux-gnu"
            echo "CROSS_COMPILE=$CROSS_COMPILE" >> $GITHUB_ENV
          
            echo "Preparing native generate files..."
            rm -rf native_build && mkdir native_build && cd native_build
              cmake -G Ninja \
                    -DCMAKE_BUILD_TYPE=Release \
                    -DOPENSSL_ROOT_DIR="${OPENSSL_ROOT_DIR}" \
                    -DOPENSSL_USE_STATIC_LIBS=ON \
                    -DZLIB_ROOT="${ZLIB_ROOT}" \
                    -DZLIB_INCLUDE_DIR="${ZLIB_ROOT}/include" \
                    -DZLIB_LIBRARY="${ZLIB_ROOT}/lib/libz.a" \
                    -DTD_ENABLE_JNI=OFF \
                    -DTD_ENABLE_DOTNET=OFF \
                    ..
              cmake --build . --target prepare_cross_compiling
            cd ..
            
            #rm -rf build && mkdir build && cd build
              ls -l
              #cp -r ../native_build/generate/* ../
            cd ..
              
      - name: Build Zlib ${{ env.tdbuild_versions_zlib }} for arm64 cross compile
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            ZLIB_ROOT="${PWD}/third_party/zlib/linux-arm64"
            echo "ZLIB_ROOT=$ZLIB_ROOT" >> $GITHUB_ENV
            rm -rf "${ZLIB_ROOT}" && mkdir -p "${ZLIB_ROOT}"
            cd $ZLIB_SRC_DIR
              make clean
              export CC="${CROSS_COMPILE}-gcc"
              export CXX="${CROSS_COMPILE}-g++"
              export AR="${CROSS_COMPILE}-ar"
              export RANLIB="${CROSS_COMPILE}-ranlib"
              export LD="${CROSS_COMPILE}-ld"
              export NM="${CROSS_COMPILE}-nm"
              export STRIP="${CROSS_COMPILE}-strip"
              ./configure --prefix="${PWD}/install" --static
              make libz.a -j$(nproc)
              make install
              cp -r install/* $ZLIB_ROOT
            cd ..

      - name: Build OpenSSL ${{ env.tdbuild_versions_openssl }} for arm64 cross compile
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            OPENSSL_ROOT_DIR="${PWD}/third_party/openssl/linux-arm64"
            echo "OPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR" >> $GITHUB_ENV
            rm -rf "${OPENSSL_ROOT_DIR}" && mkdir -p "${OPENSSL_ROOT_DIR}/lib" && mkdir -p "${OPENSSL_ROOT_DIR}/include" 
            cd $OPENSSL_SRC_DIR
              echo "Configuring OpenSSL for ARM64 cross-compile..."
              make clean
              ./Configure \
              --cross-compile-prefix="${CROSS_COMPILE}-" \
              --prefix="${OPENSSL_SRC_DIR}/install" \
              --openssldir="${OPENSSL_SRC_DIR}/install" \
              LD="${CROSS_COMPILE}-ld" \
              linux-aarch64 \
              no-shared \
              no-asm \
              no-tests \
              no-legacy         
              make build_libs -j$(nproc)
              cp libcrypto.a libssl.a "${OPENSSL_ROOT_DIR}/lib/"              
              "${CROSS_COMPILE}-strip" --strip-unneeded "${OPENSSL_ROOT_DIR}/lib/libcrypto.a"
              "${CROSS_COMPILE}-strip" --strip-unneeded "${OPENSSL_ROOT_DIR}/lib/libssl.a"
              cp -r include/openssl "${OPENSSL_ROOT_DIR}/include/"
            cd ..

      - name: Build TDLib ARM64 Release cross-compile 
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
          
            TDLIB_ARM_DIR="${PWD}/third_party/td/linux-arm64-release"
            TEMP_TOOLCHAIN="/tmp/toolchain-arm64.cmake"

            echo "Building TDLib for Linux ARM64 (cross from x86_64, static)..."
            
            rm -rf "${TDLIB_ARM_DIR}"
            mkdir -p "${TDLIB_ARM_DIR}/lib"
            mkdir -p "${TDLIB_ARM_DIR}/include"
            
            # Create temporary toolchain file
            printf '%s\n' \
            'set(CMAKE_SYSTEM_NAME Linux)' \
            'set(CMAKE_SYSTEM_PROCESSOR aarch64)' \
            'set(CMAKE_HOST_SYSTEM_NAME Linux)' \
            'set(CMAKE_HOST_SYSTEM_PROCESSOR x86_64)' \
            "set(CMAKE_C_COMPILER ${CROSS_COMPILE}-gcc)" \
            "set(CMAKE_CXX_COMPILER ${CROSS_COMPILE}-g++)" \
            "set(CMAKE_AR ${CROSS_COMPILE}-ar)" \
            "set(CMAKE_RANLIB ${CROSS_COMPILE}-ranlib)" \
            "set(CMAKE_STRIP ${CROSS_COMPILE}-strip)" \
            "set(CMAKE_LINKER ${CROSS_COMPILE}-ld)" \
            'set(CMAKE_CROSSCOMPILING ON)' \
            'set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)' \
            'set(CMAKE_SKIP_RPATH ON)' \
            '#set(CMAKE_EXE_LINKER_FLAGS "-fuse-ld=gold" CACHE STRING "")' \
            "set(CMAKE_FIND_ROOT_PATH /usr/${CROSS_COMPILE} ${OPENSSL_ROOT_DIR} ${ZLIB_ROOT})" \
            "set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)" \
            "set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)" \
            "set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)" \
            "set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)" \
            '' > "${TEMP_TOOLCHAIN}"

            echo "Printing ${TEMP_TOOLCHAIN}"
            echo "cat ${TEMP_TOOLCHAIN}"            

            echo "Configuring TDLib with CMake..."
            rm -rf build && mkdir build && cd build
              cmake -G Ninja \
                    -DCMAKE_TOOLCHAIN_FILE="${TEMP_TOOLCHAIN}" \
                    -DCMAKE_INSTALL_PREFIX:PATH=$TDLIB_ARM_DIR \
                    -DOPENSSL_ROOT_DIR="${OPENSSL_ROOT_DIR}" \
                    -DOPENSSL_USE_STATIC_LIBS=ON \
                    -DZLIB_ROOT="${ZLIB_ROOT}" \
                    -DZLIB_INCLUDE_DIR="${ZLIB_ROOT}/include" \
                    -DZLIB_LIBRARY="${ZLIB_ROOT}/lib/libz.a" \
                    -DCMAKE_BUILD_TYPE=Release \
                    -DTD_ENABLE_JNI=OFF \
                    -DTD_ENABLE_DOTNET=OFF \
                    -DTL_GENERATE_CPP=OFF \
                    -DTDJSON_GENERATE_JSON=OFF \
                    -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                    ..
  
              echo "Building TDLib..."
              cmake --build . --parallel $(nproc)
              cmake --install .
              ls -l
              cd ..
            ls -l
            # Copy libs and headers to target
            #cp example/libtdjson.a "${TDLIB_ARM_DIR}/lib/" 
            #cp -r tdjson "${TDLIB_ARM_DIR}/include/"  # Headers from tdjson/ dir
            ${CROSS_COMPILE}-strip --strip-unneeded "${TDLIB_ARM_DIR}/lib/libtdjson.a"
            #echo "TDLib cross-build complete! Lib in ${TDLIB_ARM_DIR}/lib/libtdjson.a, headers in ${TDLIB_ARM_DIR}/include/."
            
            echo "[+] arm64 Release Verification:"
            file "${TDLIB_ARM_DIR}/lib/libtdjson.so"
            ls -lh "${TDLIB_ARM_DIR}/lib/libtdjson.*"
            jar -cMf tdlib-linux-arm64-release.zip "${TDLIB_ARM_DIR}/"
            echo "TG_UPLOAD_FILES=$TG_UPLOAD_FILES ${PWD}/tdlib-linux-arm64-release.zip" >> $GITHUB_ENV
            echo "TDLIB_ARM_DIR=$TDLIB_ARM_DIR" >> $GITHUB_ENV

      - name: Upload to Telegram
        if: env.UPDATE_TDLIB == 'true'
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          SESSION: ${{ secrets.TELEGRAM_SESSION }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          MESSAGE_THREAD_ID: ${{ secrets.MESSAGE_THREAD_ID }}
          COMMIT_MESSAGE: ${{ env.commit_message }}
        run: |
          if [ ! -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
            pip3 install Telethon==${{ env.tdbuild_versions_Telethon }}
            python3 .github/workflows/tguploadbot.py $TG_UPLOAD_FILES
          fi
