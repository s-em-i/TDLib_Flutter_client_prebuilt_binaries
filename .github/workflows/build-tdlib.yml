# This is a basic workflow to help you get started with Actions

name: tdlib-build

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-android:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      
      - name: JSON to variables
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: tdbuild_versions

      - name: clone TD lib and compare versions
        run: |
          git clone https://github.com/s-em-i/TDLib_Flutter_client_prebuilt_binaries.git
          cd TDLib_Flutter_client_prebuilt_binaries
          LatestPrebuiltReleasedVersionTag=$(git describe --tags --abbrev=0 | sed 's/v//')
          echo $LatestPrebuiltReleasedVersionTag
          cd -
          git clone https://github.com/tdlib/td.git
          cd td
          LastReleasedVersionTag=$(git log -n 1 --grep="Update version to " --oneline)
          commit_hash=$(echo "$LastReleasedVersionTag" | awk '{print $1}')
          version=$(echo "$LastReleasedVersionTag" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.' | sed 's/\.$//')
          echo "$version"
          cd -

          if [[ $(echo -e "$version\n$LatestPrebuiltReleasedVersionTag" | sort -V | head -n1) == "$LatestPrebuiltReleasedVersionTag" ]]; then
            echo "version=$version" >> $GITHUB_ENV
            echo "commit_hash=$commit_hash" >> $GITHUB_ENV
          else
            echo "$version <= $LatestPrebuiltReleasedVersionTag - Kein Update nötig"
            exit 0
          fi          

      - name: Download temp file
        run: |
          wget https://core.telegram.org/tdlib/tdlib.zip

      - name: Upload to telegram Test
        env:
          CHAT_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          MESSAGE_THREAD_ID: ${{ secrets.MESSAGE_THREAD_ID }}
          COMMIT_MESSAGE: "$commit_hash Update version to $version"
          COMMIT_URL: ${{ github.event.head_commit.url }}
        run: |
          if [ ! -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
            pip3 install python-telegram-bot
            python3 $GITHUB_WORKSPACE/KernelSU/scripts/ksubot.py tdlib.zip
            python3 .github/workflows/tguploadbot.py tdlib.zip
          fi

      - name: cancel job
        run: |
          exit 0
          
      - name: install build essentials
        run: |
          sudo apt-get install -y make zlib1g-dev libssl-dev gperf cmake clang libc++-dev libc++abi-dev ninja-build

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: false

      - name: Install NDK and CMake
        run: |
          echo "=== Installing NDK 26.1.10909125 ==="
          sdkmanager "ndk;26.1.10909125"
          
          echo "=== Installing CMake 3.22.1 ==="
          sdkmanager "cmake;3.22.1"
          
          echo "=== Installing Android 34 Platform ==="
          sdkmanager "platforms;android-34"
          sdkmanager "build-tools;34.0.0"
          
          # Setze Umgebungsvariablen für NDK Version
          ANDROID_NDK_VERSION="26.1.10909125"
          CMAKE_PATH="$ANDROID_HOME/cmake/3.22.1/bin/cmake"
          
          echo "ANDROID_NDK_VERSION=$ANDROID_NDK_VERSION" >> $GITHUB_ENV
          echo "CMAKE_PATH=$CMAKE_PATH" >> $GITHUB_ENV
          
          echo "=== Verification ==="
          ls -la "$NDK_PATH" || echo "NDK not found"
          "$CMAKE_PATH" --version || echo "CMake not found"
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
      
      - name: build openssl
        run: |
          ANDROID_SDK_ROOT=$ANDROID_HOME
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV       
          OPENSSL_INSTALL_DIR="third-party/openssl"
          OPENSSL_VERSION=${{ env.tdbuild_versions_openssl_version}}
          echo "OPENSSL_INSTALL_DIR=$OPENSSL_INSTALL_DIR" >> $GITHUB_ENV
          echo "OPENSSL_VERSION=$OPENSSL_VERSION" >> $GITHUB_ENV
          cd td/example/android/
          echo "./check-environment.sh"
          ./check-environment.sh
          ./build-openssl.sh $ANDROID_SDK_ROOT $ANDROID_NDK_VERSION $OPENSSL_INSTALL_DIR openssl-$OPENSSL_VERSION

      - name: build tdlib
        run: |
          cd td/example/android/
          ./build-tdlib.sh $ANDROID_SDK_ROOT $ANDROID_NDK_VERSION '' '' 'JSON'

      - name: Upload to Telegram
        uses: xz-dev/TelegramFileUploader@v1.1.1
        with:
          to-who: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          message: "$commit_hash Update version to $version"
          files: |
            td/example/android/tdlib/tdlib-debug.zip
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}


