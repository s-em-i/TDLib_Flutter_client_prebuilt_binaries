name: tdlib-build-android
on:
  workflow_dispatch:
permissions:
  actions: write
  contents: read
jobs:
  build-tdlib-android:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Clone TDLib and compare versions
        run: |
          LatestPrebuiltReleasedVersionTag=$(git describe --tags --abbrev=0 | sed 's/v//')
          echo $LatestPrebuiltReleasedVersionTag

          git clone https://github.com/tdlib/td.git
          cd td
            LastReleasedVersionTag=$(git log -n 1 --grep="Update version to " --oneline)
            commit_hash=$(echo "$LastReleasedVersionTag" | awk '{print $1}')
            version=$(echo "$LastReleasedVersionTag" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.' | sed 's/\.$//')
            echo "$version"

            echo "UPDATE_TDLIB=false" >> $GITHUB_ENV

            if [[ $(echo -e "$version\n$LatestPrebuiltReleasedVersionTag" | sort -V | head -n1) == "$LatestPrebuiltReleasedVersionTag" ]]; then
              git checkout $commit_hash
              echo "version=$version" >> $GITHUB_ENV
              echo "commit_hash=$commit_hash" >> $GITHUB_ENV
              echo "UPDATE_TDLIB=true" >> $GITHUB_ENV
            fi
          cd -

      - name: Trigger next Workflow per CLI
        if: env.UPDATE_TDLIB == 'true'
        run: |
          RUN_ID="${{ github.run_id }}"
          gh workflow run .github/workflows/build-tdlib-linux-x86_64.yaml \
          --field commit_hash="$commit_hash" \
          --field version="$version" \
          --field UPDATE_TDLIB="$UPDATE_TDLIB" \
          --field RUN_IDS="$RUN_ID" \
          --ref ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: JSON to Variables
        if: env.UPDATE_TDLIB == 'true'
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: tdbuild_versions

      - name: Install Build Essentials
        if: env.UPDATE_TDLIB == 'true'
        run: |
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install -y make git zlib1g-dev libssl-dev gperf php-cli cmake clang-14 libc++-14-dev libc++abi-14-dev build-essential libc6-dev-arm64-cross
          sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
          sudo apt-get install -y wget libncurses5-dev perl llvm-14 autoconf automake libtool pkg-config ninja-build libreadline-dev

          ZLIB_INST_VER=$(dpkg-query -W -f='${Version}\n' zlib1g | cut -d'-' -f1 | sed -E 's/.*:(.*)\..*/\1/')
          OPENSSL_INST_VER=$(dpkg-query -W -f='${Version}\n' openssl | cut -d'-' -f1 | sed -E 's/.*:(.*)\..*/\1/')
          CMAKE_INST_VER=$(dpkg-query -W -f='${Version}\n' cmake | cut -d'-' -f1 | sed -E 's/.*:(.*)\..*/\1/')
          HOST_ARCH=$(uname -m)
          mkdir artifacts && ARTIFACT_DIR="${PWD}/artifacts"

          echo "ZLIB_INST_VER=$ZLIB_INST_VER" >> $GITHUB_ENV
          echo "OPENSSL_INST_VER=$OPENSSL_INST_VER" >> $GITHUB_ENV
          echo "CMAKE_INST_VER=$CMAKE_INST_VER" >> $GITHUB_ENV
          echo "HOST_ARCH=$HOST_ARCH" >> $GITHUB_ENV
          echo "ARTIFACT_DIR=$ARTIFACT_DIR" >> $GITHUB_ENV

      - name: Setup Android SDK
        if: env.UPDATE_TDLIB == 'true'
        uses: android-actions/setup-android@v3.2.2
        with:
          cmdline-tools-version: ${{ env.tdbuild_versions_SDK_LONG_VER }}
          accept-android-sdk-licenses: true
          log-accepted-android-sdk-licenses: false
          packages: ''

      - name: Install NDK and CMake
        if: env.UPDATE_TDLIB == 'true'
        run: |
          echo "=== Installing NDK ${{ env.tdbuild_versions_NDK }} ==="
          sdkmanager "ndk;${{ env.tdbuild_versions_NDK }}"
          echo "ANDROID_NDK_VERSION=${{ env.tdbuild_versions_NDK }}" >> $GITHUB_ENV
          
          echo "=== Installing CMake $CMAKE_INST_VER ==="
          sdkmanager "cmake;$CMAKE_INST_VER"
          
          echo "=== Installing Android ${{ env.tdbuild_versions_platform }} Platform ==="
          sdkmanager "platforms;android-${{ env.tdbuild_versions_platform }}"
          sdkmanager "build-tools;${{ env.tdbuild_versions_build-tools }}"          
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
      
      - name: Build OpenSSL for Android
        if: env.UPDATE_TDLIB == 'true'
        run: |
          ANDROID_SDK_ROOT=$ANDROID_HOME
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV       
          OPENSSL_INSTALL_DIR="third-party/openssl"
          echo "OPENSSL_INSTALL_DIR=$OPENSSL_INSTALL_DIR" >> $GITHUB_ENV
          cd td/example/android/
          echo "./check-environment.sh"
          ./check-environment.sh
          ./build-openssl.sh $ANDROID_SDK_ROOT $ANDROID_NDK_VERSION $OPENSSL_INSTALL_DIR openssl-$OPENSSL_INST_VER

      - name: Build TDLib for Android
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td/example/android/
            ./build-tdlib.sh $ANDROID_SDK_ROOT $ANDROID_NDK_VERSION '' '' 'JSON'
            TDLIB_DEBUG_ZIP="${PWD}/example/android/tdlib/tdlib-debug.zip"
            TDLIB_RELEASE_ZIP="${PWD}/example/android/tdlib/tdlib.zip"
            
            cp $TDLIB_DEBUG_ZIP "$ARTIFACT_DIR/tdlib-Android-Debug-$version.zip"
            cp $TDLIB_RELEASE_ZIP "$ARTIFACT_DIR/tdlib-Android-Release-$version.zip"

      - name: Upload To Artifacts Dir
        if: env.UPDATE_TDLIB == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ArtifactsDir
          path: ${{ env.ARTIFACT_DIR }}/*.zip
          retention-days: 1
