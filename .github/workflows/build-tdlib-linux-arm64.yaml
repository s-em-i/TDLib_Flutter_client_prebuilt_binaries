# This is a basic workflow to help you get started with Actions

name: tdlib-build-linux-arm64

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-tdlib-linux-arm64:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04-arm

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: clone TD lib and compare versions
        run: |
          git clone https://github.com/s-em-i/TDLib_Flutter_client_prebuilt_binaries.git
          cd TDLib_Flutter_client_prebuilt_binaries
            LatestPrebuiltReleasedVersionTag=$(git describe --tags --abbrev=0 | sed 's/v//')
            echo $LatestPrebuiltReleasedVersionTag
          cd -
          git clone https://github.com/tdlib/td.git
          cd td
            LastReleasedVersionTag=$(git log -n 1 --grep="Update version to " --oneline)
            commit_hash=$(echo "$LastReleasedVersionTag" | awk '{print $1}')
            version=$(echo "$LastReleasedVersionTag" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.' | sed 's/\.$//')
            echo "$version"

            echo "UPDATE_TDLIB=false" >> $GITHUB_ENV

            if [[ $(echo -e "$version\n$LatestPrebuiltReleasedVersionTag" | sort -V | head -n1) == "$LatestPrebuiltReleasedVersionTag" ]]; then
              git checkout $commit_hash
              echo "version=$version" >> $GITHUB_ENV
              echo "commit_hash=$commit_hash" >> $GITHUB_ENV
              echo "commit_message=$commit_hash Update version to $version" >> $GITHUB_ENV
              echo "UPDATE_TDLIB=true" >> $GITHUB_ENV
            fi
          cd -

      - name: JSON to variables
        if: env.UPDATE_TDLIB == 'true'
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: tdbuild_versions

      - name: install build essentials
        if: env.UPDATE_TDLIB == 'true'
        run: |
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install -y make git zlib1g-dev libssl-dev gperf php-cli cmake clang-14 libc++-14-dev libc++abi-14-dev build-essential libc6-dev-arm64-cross
          sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
          sudo apt-get install -y wget libncurses5-dev perl llvm-14 autoconf automake libtool pkg-config ninja-build libreadline-dev

          ZLIB_INST_VER=$(dpkg-query -W -f='${Version}\n' zlib1g | cut -d'-' -f1 | sed -E 's/.*:(.*)\..*/\1/')
          OPENSSL_INST_VER=$(dpkg-query -W -f='${Version}\n' openssl | cut -d'-' -f1 | sed -E 's/.*:(.*)\..*/\1/')
          HOST_ARCH=$(uname -m)
          mkdir artifact
          ARTIFACT_DIR="${PWD}/artifact"

          echo "ZLIB_INST_VER=$ZLIB_INST_VER" >> $GITHUB_ENV
          echo "OPENSSL_INST_VER=$OPENSSL_INST_VER" >> $GITHUB_ENV
          echo "HOST_ARCH=$HOST_ARCH" >> $GITHUB_ENV
          echo "ARTIFACT_DIR=$ARTIFACT_DIR" >> $GITHUB_ENV

      - name: Getting Zlib and OpenSSL source
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            ZLIB_SRC_DIR="${PWD}/zlib-$ZLIB_INST_VER"
            wget https://zlib.net/fossils/zlib-$ZLIB_INST_VER.tar.gz
            tar -xf zlib-$ZLIB_INST_VER.tar.gz
            echo "ZLIB_SRC_DIR=$ZLIB_SRC_DIR" >> $GITHUB_ENV

            OPENSSL_SRC_DIR="${PWD}/openssl-$OPENSSL_INST_VER"
            wget https://github.com/openssl/openssl/releases/download/openssl-$OPENSSL_INST_VER/openssl-$OPENSSL_INST_VER.tar.gz
            tar -xf openssl-$OPENSSL_INST_VER.tar.gz
            echo "OPENSSL_SRC_DIR=$OPENSSL_SRC_DIR" >> $GITHUB_ENV

      - name: Build TDLib Linux Release
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            BUILD_TYPE="Release"
            echo "Building TDLib for Linux $HOST_ARCH $BUILD_TYPE"
            TDLIB_DIR="${PWD}/third_party/td/linux-$HOST_ARCH-$BUILD_TYPE"
            TDLIB_ZIP=tdlib-linux-$HOST_ARCH-$BUILD_TYPE.zip

            rm -rf build && mkdir build && cd build
              CXXFLAGS="-stdlib=libc++" CC=/usr/bin/clang-14 CXX=/usr/bin/clang++-14 \
              cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
              -DCMAKE_INSTALL_PREFIX:PATH="${TDLIB_DIR}" \
              -DTD_ENABLE_LTO=ON \
              -DCMAKE_AR=/usr/bin/llvm-ar-14 \
              -DCMAKE_NM=/usr/bin/llvm-nm-14 \
              -DCMAKE_OBJDUMP=/usr/bin/llvm-objdump-14 \
              -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-14 \
              ..
              cmake --build . --parallel $(nproc) --target install
            cd ..

            cd $TDLIB_DIR && jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP *

      - name: Build TDLib Linux Debug
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            BUILD_TYPE="Debug"
            echo "Building TDLib for Linux $HOST_ARCH $BUILD_TYPE"
            TDLIB_DIR="${PWD}/third_party/td/linux-$HOST_ARCH-$BUILD_TYPE"
            TDLIB_ZIP=tdlib-linux-$HOST_ARCH-$BUILD_TYPE.zip

            rm -rf build && mkdir build && cd build
              CXXFLAGS="-stdlib=libc++" CC=/usr/bin/clang-14 CXX=/usr/bin/clang++-14 \
              cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
              -DCMAKE_INSTALL_PREFIX:PATH="${TDLIB_DIR}" \
              -DTD_ENABLE_LTO=ON \
              -DCMAKE_AR=/usr/bin/llvm-ar-14 \
              -DCMAKE_NM=/usr/bin/llvm-nm-14 \
              -DCMAKE_OBJDUMP=/usr/bin/llvm-objdump-14 \
              -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-14 \
              ..
              cmake --build . --parallel $(nproc) --target install
            cd ..

            cd $TDLIB_DIR && jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP *

      - name: Upload To Artifacts Dir
        if: env.UPDATE_TDLIB == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ArtifactsDir
          path: $ARTIFACT_DIR/*.zip
          retention-days: 1

      - name: Download All Artifacts
        if: env.UPDATE_TDLIB == 'true'
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload to Telegram
        if: env.UPDATE_TDLIB == 'false'
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          SESSION: ${{ secrets.TELEGRAM_SESSION }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          MESSAGE_THREAD_ID: ${{ secrets.MESSAGE_THREAD_ID }}
          COMMIT_MESSAGE: ${{ env.commit_message }}
        run: |
          if [ ! -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
            pip3 install Telethon==${{ env.tdbuild_versions_Telethon }}
            cd artifacts && TG_UPLOAD_FILES=$(ls *.zip)
            python3 .github/workflows/tguploadbot.py $TG_UPLOAD_FILES
          fi
