name: tdlib-build-linux-x86_64
on:
  workflow_dispatch:
    inputs:
      commit_hash:
        description: 'Commit Hash'
        required: true
        type: string
      version:
        description: 'Version'
        required: true
        type: string
      UPDATE_TDLIB:
        description: 'UPDATE_TDLIB'
        required: true
        type: string
        default: 'false'
      RUN_IDS:
        description: 'RUN_IDS'
        required: true
        type: string
permissions:
  actions: write
  contents: read 
jobs:
  build-tdlib-linux-x86_64:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          
      - name: Parse Inputs in GITHUB_ENV
        run: |
          echo "commit_hash=${{ inputs.commit_hash }}" >> $GITHUB_ENV
          echo "version=${{ inputs.version }}" >> $GITHUB_ENV
          echo "UPDATE_TDLIB=${{ inputs.UPDATE_TDLIB }}" >> $GITHUB_ENV
          echo "RUN_IDS=${{ inputs.RUN_IDS }}" >> $GITHUB_ENV

      - name: Trigger next Workflow per CLI
        if: env.UPDATE_TDLIB == 'true'
        run: |
          RUN_ID="${{ github.run_id }}"
          RUN_IDS="$RUN_IDS,$RUN_ID"
          gh workflow run .github/workflows/build-tdlib-linux-arm64.yaml \
          --field commit_hash="$commit_hash" \
          --field version="$version" \
          --field UPDATE_TDLIB="$UPDATE_TDLIB" \
          --field RUN_IDS="$RUN_IDS" \
          --ref ${{ github.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: JSON to variables
        if: env.UPDATE_TDLIB == 'true'
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: tdbuild_versions

      - name: Install Build Essentials
        if: env.UPDATE_TDLIB == 'true'
        run: |
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install -y make git zlib1g-dev libssl-dev gperf php-cli cmake clang-14 libc++-14-dev libc++abi-14-dev build-essential libc6-dev-arm64-cross
          sudo apt-get install -y --no-install-recommends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu
          sudo apt-get install -y wget libncurses5-dev perl llvm-14 autoconf automake libtool pkg-config ninja-build libreadline-dev

          ZLIB_INST_VER=$(dpkg-query -W -f='${Version}\n' zlib1g | cut -d'-' -f1 | sed -E 's/.*:(.*)\..*/\1/')
          OPENSSL_INST_VER=$(dpkg-query -W -f='${Version}\n' openssl | cut -d'-' -f1 | sed -E 's/.*:(.*)\..*/\1/')
          CMAKE_INST_VER=$(dpkg-query -W -f='${Version}\n' cmake | cut -d'-' -f1 | sed -E 's/.*:(.*)\..*/\1/')
          HOST_ARCH=$(uname -m)
          mkdir artifacts && ARTIFACT_DIR="${PWD}/artifacts"

          echo "ZLIB_INST_VER=$ZLIB_INST_VER" >> $GITHUB_ENV
          echo "OPENSSL_INST_VER=$OPENSSL_INST_VER" >> $GITHUB_ENV
          echo "CMAKE_INST_VER=$CMAKE_INST_VER" >> $GITHUB_ENV
          echo "HOST_ARCH=$HOST_ARCH" >> $GITHUB_ENV
          echo "ARTIFACT_DIR=$ARTIFACT_DIR" >> $GITHUB_ENV

      - name: Clone TDLib
        if: env.UPDATE_TDLIB == 'true'
        run: |
          git clone https://github.com/tdlib/td.git
          cd td && git checkout $commit_hash

      - name: Build TDLib Linux x86_64 Release
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            BUILD_TYPE="Release"
            SYSTEM="Linux"
            echo "Building TDLib for $SYSTEM $HOST_ARCH $BUILD_TYPE"
            TDLIB_DIR="${PWD}/tdlib"
            TDLIB_ZIP="tdlib-$SYSTEM-$HOST_ARCH-$BUILD_TYPE-$version.zip"
            TDLIB_FILES="tdlib/lib/libtdjson.so"

            rm -rf build && mkdir build && cd build
              CXXFLAGS="-stdlib=libc++" CC=/usr/bin/clang-14 CXX=/usr/bin/clang++-14 \
              cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
              -DCMAKE_INSTALL_PREFIX:PATH="${TDLIB_DIR}" \
              -DTD_ENABLE_LTO=ON \
              -DCMAKE_AR=/usr/bin/llvm-ar-14 \
              -DCMAKE_NM=/usr/bin/llvm-nm-14 \
              -DCMAKE_OBJDUMP=/usr/bin/llvm-objdump-14 \
              -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-14 \
              ..
              cmake --build . --parallel $(nproc) --target install
            cd ..

            jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $TDLIB_FILES

      - name: Build TDLib Linux x86_64 Debug
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            BUILD_TYPE="Debug"
            SYSTEM="Linux"
            echo "Building TDLib for $SYSTEM $HOST_ARCH $BUILD_TYPE"
            TDLIB_DIR="${PWD}/tdlib"
            TDLIB_ZIP="tdlib-$SYSTEM-$HOST_ARCH-$BUILD_TYPE-$version.zip"
            TDLIB_FILES="tdlib/lib/libtdjson.so"

            rm -rf build && mkdir build && cd build
              CXXFLAGS="-stdlib=libc++" CC=/usr/bin/clang-14 CXX=/usr/bin/clang++-14 \
              cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
              -DCMAKE_INSTALL_PREFIX:PATH="${TDLIB_DIR}" \
              -DTD_ENABLE_LTO=ON \
              -DCMAKE_AR=/usr/bin/llvm-ar-14 \
              -DCMAKE_NM=/usr/bin/llvm-nm-14 \
              -DCMAKE_OBJDUMP=/usr/bin/llvm-objdump-14 \
              -DCMAKE_RANLIB=/usr/bin/llvm-ranlib-14 \
              ..
              cmake --build . --parallel $(nproc) --target install
            cd ..
            
            jar -cMf $ARTIFACT_DIR/$TDLIB_ZIP $TDLIB_FILES

      - name: Upload To Artifacts Dir
        if: env.UPDATE_TDLIB == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ArtifactsDir
          path: ${{ env.ARTIFACT_DIR }}/*.zip
          retention-days: 1
