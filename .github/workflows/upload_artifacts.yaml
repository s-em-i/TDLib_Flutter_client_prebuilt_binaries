name: upload_artifacts

on:
  workflow_dispatch:
    inputs:
      RUN_IDS:
        description: 'RUN_IDS'
        required: true
        type: string
      commit_message:
        description: 'commit_message'
        required: true
        type: string
      UPDATE_TDLIB:
        description: 'UPDATE_TDLIB'
        required: true
        type: string
        default: 'false'
        
jobs:
  upload_artifacts:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4    
      - name: Parse Inputs in GITHUB_ENV
        run: |
          echo "RUN_IDS=${{ inputs.RUN_IDS }}" >> $GITHUB_ENV
          echo "commit_message=${{ inputs.commit_message }}" >> $GITHUB_ENV
          echo "UPDATE_TDLIB=${{ inputs.UPDATE_TDLIB }}" >> $GITHUB_ENV
      
      - name: JSON to variables
        if: env.UPDATE_TDLIB == 'true'
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: tdbuild_versions
          
      - name: Download Artifacts per Run-ID
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IFS=',' read -ra RUN_ID_ARRAY <<< "$run_ids"
          echo "Processed Run-IDs: ${RUN_ID_ARRAY[*]}"
          mkdir -p artifacts
          
          # Wait-Funktion (mit Fix f端r ung端ltige IDs)
          wait_for_run() {
            local RUN_ID=$1
            local MAX_WAIT=1800
            local POLL_INTERVAL=30
            local ELAPSED=0
            
            while [ $ELAPSED -lt $MAX_WAIT ]; do
              STATUS=$(gh run view "$RUN_ID" --json=status,conclusion --jq '.status + " " + (.conclusion // "null")' 2>/dev/null || echo "error invalid_id")
              
              if [[ $STATUS == "completed success" ]]; then
                echo "Run $RUN_ID: Completed successfully!"
                return 0
              elif [[ $STATUS == "completed failure" ]]; then
                echo "Run $RUN_ID: Failed!"
                return 1
              elif [[ $STATUS == "completed "* ]]; then
                echo "Run $RUN_ID: Completed with neutral outcome."
                return 0
              elif [[ $STATUS == "error invalid_id" ]]; then
                echo "Run $RUN_ID: Skipping Null IDs"
                return 0
              else
                echo "Run $RUN_ID: Still $STATUS. Waiting..."
              fi
              
              sleep $POLL_INTERVAL
              ELAPSED=$((ELAPSED + POLL_INTERVAL))
            done
            
            echo "Timeout waiting for Run $RUN_ID"
            return 1
          }
          
          ALL_SUCCESS=true
          for RUN_ID in "${RUN_ID_ARRAY[@]}"; do
            if [ "$RUN_ID" = "null" ] || [ -z "$RUN_ID" ]; then
              echo "Skipping invalid Run-ID: '$RUN_ID'"
              continue
            fi
            if ! wait_for_run "$RUN_ID"; then
              echo "One or more runs failed. Aborting."
              ALL_SUCCESS=false
              break
            fi
          done
          
          if [ "$ALL_SUCCESS" != true ]; then
            exit 1
          fi
          
          echo "All valid runs completed successfully. Downloading artifacts..."
          
          ZIP_COUNT=0
          for RUN_ID in "${RUN_ID_ARRAY[@]}"; do
            if [ "$RUN_ID" = "null" ] || [ -z "$RUN_ID" ]; then
              echo "Skipping invalid Run-ID while downloading: '$RUN_ID'"
              continue
            fi
            
            echo "Downloading from run $RUN_ID"
            
            # Hole ALLE Artifacts und filter nach "ArtifactsDir"
            API_RESPONSE=$(gh api \
              "/repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts" \
              --jq '{total: length, artifacts: [.[] | {name: .name, url: .archive_download_url}]}' \
              --header 'Accept:application/vnd.github.v3+json')
            
            echo "API Response f端r Run $RUN_ID: $API_RESPONSE"
            
            TOTAL_ARTIFACTS=$(echo "$API_RESPONSE" | jq -r '.total // 0')
            if [ "$TOTAL_ARTIFACTS" -eq 0 ]; then
              echo "Keine Artifacts f端r Run $RUN_ID gefunden!"
              continue
            fi
            
            ARTIFACT_URL=$(echo "$API_RESPONSE" | jq -r '.artifacts[] | select(.name == "ArtifactsDir") | .url // empty')
            if [ ! -z "$ARTIFACT_URL" ]; then
              echo "Found Artifact 'ArtifactsDir' - Downloading: $ARTIFACT_URL"

              DOWNLOAD_SUCCESS=$(curl -L -H "Authorization: token $GITHUB_TOKEN" "$ARTIFACT_URL" -o /tmp/artifact.tar.gz --fail --silent --show-error && echo "success" || echo "failed")
              if [ "$DOWNLOAD_SUCCESS" = "success" ]; then
                echo "Download erfolgreich! Entpacke..."
                tar -xzf /tmp/artifact.tar.gz -C artifacts/ --strip-components=1  # --strip-components=1, falls nested
                rm /tmp/artifact.tar.gz
                
                NEW_ZIPS=$(ls artifacts/*.zip 2>/dev/null | wc -l || echo 0)
                ZIP_COUNT=$((ZIP_COUNT + NEW_ZIPS))
                echo "Entpackt! Neue ZIPs: $NEW_ZIPS (Gesamt: $ZIP_COUNT)"
                
                echo "Inhalt von artifacts/:"
                ls -la artifacts/
              else
                echo "Download broken for Run $RUN_ID (curl-Error: $?)"
              fi
            else
              echo "No 'ArtifactsDir'-Artifact for Run $RUN_ID found!"

              ARTIFACT_URL=$(echo "$API_RESPONSE" | jq -r '.artifacts[0].url // empty')
              if [ ! -z "$ARTIFACT_URL" ]; then
                echo "Fallback: Download first Artifact: $ARTIFACT_URL"
              fi
            fi
          done
          
          echo "Finale ZIP-Anzahl: $ZIP_COUNT"
          if [ $ZIP_COUNT -eq 0 ]; then
            echo "WARNING: No ZIPs to Download! Check Builds."
          fi
          ls -la artifacts/*.zip 2>/dev/null || echo "No ZIPs."

      - name: Upload to Telegram
        if: env.UPDATE_TDLIB == 'true'
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          SESSION: ${{ secrets.TELEGRAM_SESSION }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          MESSAGE_THREAD_ID: ${{ secrets.MESSAGE_THREAD_ID }}
          COMMIT_MESSAGE: ${{ env.commit_message }}
        run: |
          if [ ! -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
            pip3 install Telethon==${{ env.tdbuild_versions_Telethon }}
            TGUPLOAD="${PWD}/.github/workflows/tguploadbot.py"            
            cd artifacts && TG_UPLOAD_FILES=$(ls *.zip)
            python3 $TGUPLOAD $TG_UPLOAD_FILES
          fi
