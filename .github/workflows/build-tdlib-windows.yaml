name: tdlib-build-windows
on:
  workflow_dispatch:
permissions:
  actions: write
  contents: read
jobs:
  build-tdlib-windows:
    runs-on: windows-2025
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          fetch-tags: true
          
      - name: Clone TDLib and compare versions
        run: |
          LatestPrebuiltReleasedVersionTag=$(git describe --tags --abbrev=0 | sed 's/v//')
          echo $LatestPrebuiltReleasedVersionTag

          git clone https://github.com/tdlib/td.git
          cd td
            LastReleasedVersionTag=$(git log -n 1 --grep="Update version to " --oneline)
            commit_hash=$(echo "$LastReleasedVersionTag" | awk '{print $1}')
            version=$(echo "$LastReleasedVersionTag" | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+\.' | sed 's/\.$//')
            echo "$version"

            echo "UPDATE_TDLIB=false" >> $GITHUB_ENV

            if [[ $(echo -e "$version\n$LatestPrebuiltReleasedVersionTag" | sort -V | head -n1) == "$LatestPrebuiltReleasedVersionTag" ]]; then
              git checkout $commit_hash
              echo "version=$version" >> $GITHUB_ENV
              echo "commit_hash=$commit_hash" >> $GITHUB_ENV
              echo "UPDATE_TDLIB=true" >> $GITHUB_ENV
            fi
          cd -
          choco install wget -y
        shell: bash

      - name: JSON to variables
        if: env.UPDATE_TDLIB == 'true'
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: '.github/workflows/td-version.json'
          prefix: tdbuild_versions

      - name: Install vcpkg
        if: env.UPDATE_TDLIB == 'false'
        run: |
          HOST_ARCH=$(uname -m)
          mkdir -p artifacts && ARTIFACT_DIR="${PWD}/artifacts"
          echo "ARTIFACT_DIR-Wert: $ARTIFACT_DIR"
          echo "HOST_ARCH=$HOST_ARCH" >> $GITHUB_ENV
          echo "ARTIFACT_DIR=$ARTIFACT_DIR" >> $GITHUB_ENV
          printf "commit_message<<EOF\n%s\n%s\nEOF\n" "TDLib Prebuilt Binaries $version" "$commit_hash Update version to $version" >> $GITHUB_ENV
          
          cd td
            git clone https://github.com/Microsoft/vcpkg.git
            cd vcpkg
              git checkout bc3512a509f9d29b37346a7e7e929f9a26e66c7e
              ./bootstrap-vcpkg.bat
              ./vcpkg.exe install gperf:x64-windows openssl:x64-windows zlib:x64-windows
        shell: bash
      
      - name: Build TDLib Windows x64 Release
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            BUILD_TYPE="Release"
            SYSTEM="Windows"
            BITNESS="x64"
            echo "Building TDLib for $SYSTEM $HOST_ARCH $BITNESS $BUILD_TYPE"
            TDLIB_DIR="${PWD}/tdlib"
            TDLIB_ZIP="tdlib-$SYSTEM-$HOST_ARCH-$BITNESS-$BUILD_TYPE-$version.zip"          
          
            #rm -rf build && mkdir build && cd build
            #  cmake -A $BITNESS -DCMAKE_INSTALL_PREFIX:PATH=$TDLIB_DIR -DCMAKE_TOOLCHAIN_FILE:FILEPATH=../vcpkg/scripts/buildsystems/vcpkg.cmake ..
            #  cmake --build . --parallel $(nproc) --target install --config $BUILD_TYPE
            #cd ..
            mkdir -p $TDLIB_DIR
            echo "changing to $TDLIB_DIR"
            cd $TDLIB_DIR
              wget https://zlib.net/fossils/zlib-1.3.1.tar.gz
              ls -l
            echo "compressing to $ARTIFACT_DIR/$TDLIB_ZIP *"
            jar -cMf "$ARTIFACT_DIR/JAR_$TDLIB_ZIP" *            
            
            echo "Aktuelles Working Directory: $(pwd)"
            echo "ARTIFACT_DIR-Wert: $ARTIFACT_DIR"
            echo "Vollständiger Pfad zur ZIP: $ARTIFACT_DIR/$TDLIB_ZIP"
            ls -la "$ARTIFACT_DIR"
            ls -la "$ARTIFACT_DIR"/*.zip || echo "Keine .zip-Datei gefunden!"
            
            # Überprüfe Dateigröße (sollte >0 sein)
            if [ -f "$ARTIFACT_DIR/$TDLIB_ZIP" ]; then
              echo "ZIP-Datei existiert und hat Größe: $(stat -c%s "$ARTIFACT_DIR/$TDLIB_ZIP" 2>/dev/null || stat -f%z "$ARTIFACT_DIR/$TDLIB_ZIP") Bytes"
            else
              echo "FEHLER: ZIP-Datei wurde nicht erstellt!"
            fi
            
            zip -r "$ARTIFACT_DIR/ZIP_$TDLIB_ZIP" *
            echo "Aktuelles Working Directory: $(pwd)"
            echo "ARTIFACT_DIR-Wert: $ARTIFACT_DIR"
            echo "Vollständiger Pfad zur ZIP: $ARTIFACT_DIR/$TDLIB_ZIP"
            ls -la "$ARTIFACT_DIR"
            ls -la "$ARTIFACT_DIR"/*.zip || echo "Keine .zip-Datei gefunden!"
            
            # Überprüfe Dateigröße (sollte >0 sein)
            if [ -f "$ARTIFACT_DIR/$TDLIB_ZIP" ]; then
              echo "ZIP-Datei existiert und hat Größe: $(stat -c%s "$ARTIFACT_DIR/$TDLIB_ZIP" 2>/dev/null || stat -f%z "$ARTIFACT_DIR/$TDLIB_ZIP") Bytes"
            else
              echo "FEHLER: ZIP-Datei wurde nicht erstellt!"
            fi
        shell: bash

      - name: Build TDLib macOS x86_64 Debug
        if: env.UPDATE_TDLIB == 'true'
        run: |
          cd td
            BUILD_TYPE="Debug"
            SYSTEM="macOS"
        shell: bash            

      - name: Upload To Artifacts Dir
        if: env.UPDATE_TDLIB == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ArtifactsDir
          path: ${{ env.ARTIFACT_DIR }}/*.zip
          retention-days: 1

      - name: Download All Artifacts
        if: env.UPDATE_TDLIB == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ArtifactsDir
          path: artifacts

      - name: Upload to Telegram
        if: env.UPDATE_TDLIB == 'true'
        env:
          API_ID: ${{ secrets.TELEGRAM_API_ID }}
          API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          SESSION: ${{ secrets.TELEGRAM_SESSION }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
          MESSAGE_THREAD_ID: ${{ secrets.MESSAGE_THREAD_ID }}
          COMMIT_MESSAGE: ${{ env.commit_message }}
        run: |
          if [ ! -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
            pip3 install Telethon==${{ env.tdbuild_versions_Telethon }}
            TGUPLOAD="${PWD}/.github/workflows/tguploadbot.py"            
            cd artifacts
              TG_UPLOAD_FILES=$(ls *.zip)
              ls -l
            python3 $TGUPLOAD $TG_UPLOAD_FILES
          fi
        shell: bash
